plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.terraformersmc.com/releases' }
	maven { url = "https://maven.terraformersmc.com/" }
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url = "https://dvs1.progwml6.com/files/maven/" }
	maven { url = "https://modmaven.dev" }
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
	modApi "com.terraformersmc:modmenu:${mod_menu}"

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cc_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${cc_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${cc_version}"

	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cc_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${cc_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${cc_version}"

	modImplementation "vazkii.patchouli:Patchouli:${patchouli_version}"

	include modApi("teamreborn:energy:${energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${gecko_lib}"

	// Visit https://www.curseforge.com/minecraft/mc-mods/jade/files
	// to get the latest version's jade_id
	modImplementation "curse.maven:jade-324717:4710614"

	modImplementation ("TechReborn:TechReborn-1.20:${techreborn_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "maven.modrinth:lightest-lamps:4.1.1"
}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/reforested.accesswidener")

	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
